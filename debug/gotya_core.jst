function GotYaCore(cfg, colors, image) {

    var GotYaCore = new Object()

    GotYaCore.initialize = function(cfg, colors, image) {
        this.colors = colors;
        this.cfg = cfg;
        this.image = image;
    };

    GotYaCore.getImage = function () {
        return this.image;
    }

    GotYaCore.simpleneighborcount = function (x, y, image, c) {
        if (!image) {
            image = this.getImage();
        }
        if (!c)
            c = this.colors.fc;

        var b = 0;
        if (((y-1) > 0) && (image.data[x][y-1] == c)) b++;
        if (((y+1) < image.data[x].length) && (image.data[x][y+1] == c)) b++;
        if (((x-1) > 0) && (image.data[x-1][y] == c)) b++;
        if (((x+1) < image.data.length) && (image.data[x+1][y] == c)) b++;
        return b;
    };

    GotYaCore.findregions = function(s, w, results) {
        var dbg=0;
        var image = this.getImage();
        if (s < 4) return;
        if (results == null) results = new Array();

        var width = image.data.length;
        var height = image.data[0].length;

        for (var x = 0; x < (width-s); x += 1){
            for (var y = 0; y < (height-s); y += 1){
                var c = 0;
                var stop = false;
                var b = 0;
                // count pixels
                for (var my = y; my < (y+s); my++) {
                    for (var mx = x; mx < (x+s); mx++) {
                        if (image.data[mx][my] == this.colors.fc) {
                            c++;
                        }
                    }
                }
                if (c >= w) {
                    // penalize border pixels and double-penalize
                    // borderpixels with neighbors outside
                    for (var t=0; t<s; t++) {
                        var tx = 0;
                        var ty = 0;
                        for (var r=0; r < 4; r++) {
                            if (r == 0) {
                                tx = x-1;
                                ty = y-1+t;
                            } else if (r == 1) {
                                tx = x-1+t;
                                ty = y-1;
                            } else if (r == 2) {
                                tx = x+s;
                                ty = y+s-t;
                            } else if (r == 3) {
                                tx = x+s-t;
                                ty = y+s;
                            }
                            if (tx > 0 && ty > 0 && tx < width && ty < height) {
                                if (image.data[tx][ty] == this.colors.fc) {
                                    c-=(this.simpleneighborcount(tx,ty,image,this.colors.fc)-this.cfg.allowedoutsideneighbors)*
                                        this.cfg.penalizeoutsideneigh*
                                        this.cfg.penalizeneighbors;
                                }
                            }
                        }
                    }
                    var r = new Object();
                    r.count = c + (33-s)*4; // small regions are better
                    r.x = x<0 ? 0: x;
                    r.y = y<0 ? 0: y;
                    r.size = s;
                    results.push(r);
                }
            }
        }

        return results;
    };

    GotYaCore.matchingpixelfast = function (d_img, o_img, j) {
        if (j == null) j = 0;

        var minx = (d_img.minx == null) ? 0 : d_img.minx;
        var maxx = (d_img.maxx == null) ? d_img.length-1 : d_img.maxx;
        var miny = (d_img.miny == null) ? 0 : d_img.miny;
        var maxy = (d_img.maxy == null) ? d_img[0].lenght-1 : d_img.maxy;

        var bc=new Object();
        bc.c = 0;

        var c = new Array();
        for (var xj = -j; xj <= j; xj++) {
            c[xj] = new Array();
            for (var yj = -j; yj <= j; yj++) {
                c[xj][yj] = 100;
            }
        }

        for (var x = minx; x <= maxx; x++){
            for (var y = miny ; y <= maxy; y++){
                var d = d_img.data[x][y];
                if (d == this.colors.fc) {
                    for (var xj = -j; xj <= j; xj++) {
                        for (var yj = -j; yj <= j; yj++) {
                            var ox = o_img.data[x+xj];
                            if (ox != undefined) {
                                var o = o_img.data[x+xj][y+yj];
                                if (o == this.colors.fc) {
                                    c[xj][yj]+=cfg.pxmatchscore;
                                } else {
                                    var n = this.simpleneighborcount(x+xj, y+yj, o_img);
                                    if (n) {
                                        c[xj][yj]+=cfg.pxneighmatchscore;
                                    } else {
                                        c[xj][yj]+=cfg.pxnotmatchscore;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        for (var xj = -j; xj <= j; xj++) {
            for (var yj = -j; yj <= j; yj++) {
                if (c[xj][yj] > bc.c) {
                    bc.x = xj;
                    bc.y = yj;
                    bc.c = c[xj][yj];
                }
            }
        }

        return bc;
    };

    GotYaCore.paint = function(i) {
        var r = new Object();
        r.paint = true;
        var m = new Object();
        m.data = i;
        r.image = m;
        postMessage(r);
    };
    
    GotYaCore.printf = function(s) {
        var r = new Object();
        r.debug = true;
        r.text = s;
        postMessage(r);
    };

    GotYaCore.initialize(cfg, colors, image);

    return GotYaCore;
}

    onmessage = function(event) {
        var o = event.data;
        var x = new Object();
        var g = new GotYaCore(o.cfg, o.colors, o.image);
        var r = new Object();
        r.index = o.index;

        if (o.findregions) {
            r.ret = g.findregions(o.s, o.w, o.results);
            r.region = o.region;
        }
        if (o.matchingpixel) {
            r.ret = g.matchingpixelfast(o.d_img, o.o_img, o.j)
            r.region = o.region;
            r.w = o.w;
            r.n = o.n;
        }

        postMessage(r);
    };
